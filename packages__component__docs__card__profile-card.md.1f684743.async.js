(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[19,10],{Nyhg:function(n,e,t){"use strict";t.r(e);var o=t("wx14"),r=t("q1tI"),a=t.n(r),s=(t("B2uJ"),t("+su7"),t("qOys")),i=t.n(s),l=t("5Yjd"),m=t.n(l),p=a.a.memo((function(){var n=t("TqRt"),e=n(t("q1tI")),o=n(t("fOUu")),r=function(){return e.default.createElement(o.default,null)};return e["default"].createElement(r)}));e["default"]=function(){return a.a.createElement(a.a.Fragment,null,a.a.createElement("div",{className:"markdown"},a.a.createElement("h2",{id:"iconfont-demo"},a.a.createElement("a",{"aria-hidden":"true",href:"#iconfont-demo"},a.a.createElement("span",{className:"icon icon-link"})),"IconFont demo")),a.a.createElement(m.a,Object(o["a"])({source:{tsx:"import React from 'react';\nimport { MapItem, ProfileCard } from '../../src';\n\nexport default () => {\n  const data = [\n    {\n      item: (\n        <ProfileCard\n          {...{\n            type: 'style1',\n            data: {\n              avatar:\n                'https://avatars.githubusercontent.com/u/51617383?s=400&u=59f471da8c7efa0fde0d34652dde3635a6ff9b9f&v=4',\n              name: 'Sila Rim',\n              sub1: '32342 posts',\n              sub2: '4235 likes',\n              socialData: [\n                {\n                  name: 'facebook',\n                  iconType: 'icon-facebook1',\n                },\n                {\n                  name: 'github',\n                  iconType: 'icon-list-icon-github',\n                },\n              ],\n            },\n          }}\n        />\n      ),\n      copyCode: `<NextButton type=\"primary\">Primary Button</NextButton>`,\n    },\n  ];\n\n  return <MapItem {...{ data, antSpan: 10, gut1: 50 }} />;\n};\n",jsx:"import React from 'react';\nimport { MapItem, ProfileCard } from '../../src';\nexport default () => {\n  const data = [\n    {\n      item: (\n        <ProfileCard\n          {...{\n            type: 'style1',\n            data: {\n              avatar:\n                'https://avatars.githubusercontent.com/u/51617383?s=400&u=59f471da8c7efa0fde0d34652dde3635a6ff9b9f&v=4',\n              name: 'Sila Rim',\n              sub1: '32342 posts',\n              sub2: '4235 likes',\n              socialData: [\n                {\n                  name: 'facebook',\n                  iconType: 'icon-facebook1',\n                },\n                {\n                  name: 'github',\n                  iconType: 'icon-list-icon-github',\n                },\n              ],\n            },\n          }}\n        />\n      ),\n      copyCode: `<NextButton type=\"primary\">Primary Button</NextButton>`,\n    },\n  ];\n  return (\n    <MapItem\n      {...{\n        data,\n        antSpan: 10,\n        gut1: 50,\n      }}\n    />\n  );\n};\n"}},{path:"/_demos/profile-card",CSSInDependencies:["antd/dist/antd.css"],dependencies:{react:">=16.9.0","react-dom":">=16.9.0","rc-util":"5.5.0","@ant-design/icons":"4.5.0",antd:"4.8.4",classnames:"2.2.6",lodash:"^4.x","path-to-regexp":"^6.x","@next-dev/core":"3.4.6","rc-footer":"0.6.3",typescript:"4","react-intl":"5.10.4","@next-dev/provider":"0.0.2-beta.0","react-router-dom":"5.2.0"},files:{"src/index.tsx":{path:"../../src",content:"import { configIconUrl } from './IconFont';\n\ninterface IWetrialComponentProps {\n  /**\n   * Font icon file address\n   */\n  iconFontUrl: string | string[];\n}\n\nexport const initComponent = (props: IWetrialComponentProps) => {\n  configIconUrl(props.iconFontUrl);\n};\n\nexport { ProfileCard } from './NextCard/ProfileCard';\nexport { default as IconFont } from './IconFont';\nexport { default as NextButton } from './NextButton';\nexport { default as MapItem } from './mapItem';\nexport { default as NextRow } from './NextRow';\nexport { default as NextFooter } from './NextFooter';\nexport { InjectMassage } from './utils/IntlMessages';\nexport { default as ForgotPassword } from './Auth/ForgotPassword';\nexport { default as NextSignIn } from './Auth/SignIn';\nexport { default as ResetPassword } from './Auth/ResetPassword';\nexport { default as NextSignUp } from './Auth/SignUp';\nexport { default as NextLockScreen } from './Auth/LockScreen';\n"},"IconFont/index.tsx":{path:"./IconFont",content:"import React from 'react';\nimport { noteOnce } from 'rc-util/lib/warning';\nimport { createFromIconfontCN } from '@ant-design/icons';\nimport { IconBaseProps } from '@ant-design/icons/es/components/Icon';\n\ninterface IconFontProps extends IconBaseProps {\n  type: string;\n}\n\nlet IconFont: React.FC<IconFontProps> = () => null;\n\nexport function configIconUrl(scriptUrl: string | string[]) {\n  IconFont = createFromIconfontCN({\n    scriptUrl,\n  });\n}\n\nexport default (props: IconFontProps) => {\n  noteOnce(!!IconFont, 'IconFont is not init');\n  return IconFont ? <IconFont style={{ fontSize: 24 }} {...props} /> : null;\n};\n"},"NextCard/ProfileCard/index.tsx":{path:"./NextCard/ProfileCard",content:'import { IconFont } from \'@wetrial/component\';\nimport { Space } from \'antd\';\nimport classNames from \'classnames\';\nimport isEmpty from \'lodash/isEmpty\';\nimport React, { memo } from \'react\';\nimport \'./index.less\';\n\n//* ------ defaultData -------- */\nconst defaultData = {\n  avatar: \'\',\n  name: \'\',\n  sub1: \'\',\n  sub2: \'\',\n  socialData: [],\n};\n\n//* ------ IProfileProps -------- */\ntype IProfileProps = {\n  type: \'style1\';\n  data: typeof defaultData;\n};\n\n//* ------ ProfileCard -------- */\nexport const ProfileCard = memo((props: IProfileProps) => {\n  const { type, data = defaultData } = props;\n  const { avatar, name, sub1, sub2, socialData = [] } = data || {};\n\n  return (\n    <div className={classNames(\'profile_card\')}>\n      {/* //* ------ start card -------- */}\n      <div className="card">\n        {type === \'style1\' && (\n          <>\n            <img src={avatar} alt="Person" className="card__image" />\n            {name && <p className="card__name">{name}</p>}\n            <div className="grid-container">\n              {sub1 && <div className="grid-child-posts">{sub1}</div>}\n              {sub2 && <div className="grid-child-followers">{sub2}</div>}\n            </div>\n\n            {!isEmpty(socialData) && (\n              <ul className="social-icons">\n                {socialData?.map((v, i) => {\n                  return (\n                    <Space key={i} direction="horizontal" size="large">\n                      <IconFont type={v?.iconType} className="mr-10" />\n                    </Space>\n                  );\n                })}\n              </ul>\n            )}\n\n            <button type="button" className="btn draw-border">\n              Follow\n            </button>\n            <button type="button" className="btn draw-border">\n              Message\n            </button>\n          </>\n        )}\n      </div>\n      {/* //* ------ end card -------- */}\n    </div>\n  );\n});\n'},"index.less":{path:"./index.less",content:".profile_card {\n  .card {\n    background-color: #222831;\n    height: 37rem;\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    box-shadow: rgba(0, 0, 0, 0.7);\n    color: white;\n  }\n\n  .card__name {\n    margin-top: 15px;\n    font-size: 1.5em;\n  }\n\n  .card__image {\n    height: 160px;\n    width: 160px;\n    border-radius: 50%;\n    border: 5px solid #272133;\n    margin-top: 20px;\n    box-shadow: 0 10px 50px rgba(235, 25, 110, 1);\n  }\n\n  .draw-border {\n    box-shadow: inset 0 0 0 4px #58cdd1;\n    color: #58afd1;\n    -webkit-transition: color 0.25s 0.0833333333s;\n    transition: color 0.25s 0.0833333333s;\n    position: relative;\n  }\n\n  .draw-border::before,\n  .draw-border::after {\n    border: 0 solid transparent;\n    box-sizing: border-box;\n    content: '';\n    pointer-events: none;\n    position: absolute;\n    width: 0rem;\n    height: 0;\n    bottom: 0;\n    right: 0;\n  }\n\n  .draw-border::before {\n    border-bottom-width: 4px;\n    border-left-width: 4px;\n  }\n\n  .draw-border::after {\n    border-top-width: 4px;\n    border-right-width: 4px;\n  }\n\n  .draw-border:hover {\n    color: #ffe593;\n  }\n\n  .draw-border:hover::before,\n  .draw-border:hover::after {\n    border-color: #eb196e;\n    -webkit-transition: border-color 0s, width 0.25s, height 0.25s;\n    transition: border-color 0s, width 0.25s, height 0.25s;\n    width: 100%;\n    height: 100%;\n  }\n\n  .draw-border:hover::before {\n    -webkit-transition-delay: 0s, 0s, 0.25s;\n    transition-delay: 0s, 0s, 0.25s;\n  }\n\n  .draw-border:hover::after {\n    -webkit-transition-delay: 0s, 0.25s, 0s;\n    transition-delay: 0s, 0.25s, 0s;\n  }\n\n  .btn {\n    background: none;\n    border: none;\n    cursor: pointer;\n    line-height: 1.5;\n    font: 700 1.2rem 'Roboto Slab', sans-serif;\n    padding: 0.75em 2em;\n    letter-spacing: 0.05rem;\n    margin: 1em;\n    width: 13rem;\n  }\n\n  .btn:focus {\n    outline: 2px dotted #55d7dc;\n  }\n\n  .social-icons {\n    padding: 0;\n    list-style: none;\n    margin: 1em;\n  }\n\n  .social-icons li {\n    display: inline-block;\n    margin: 0.15em;\n    position: relative;\n    font-size: 1em;\n  }\n\n  .social-icons i {\n    color: #fff;\n    position: absolute;\n    top: 0.95em;\n    left: 0.96em;\n    transition: all 265ms ease-out;\n  }\n\n  .social-icons li:hover:before {\n    transform: scale(0);\n    transition: all 265ms ease-in;\n  }\n\n  .social-icons svg:hover {\n    transform: scale(1.6);\n    -ms-transform: scale(1.6);\n    -webkit-transform: scale(1.6);\n    color: #ff003c;\n    background: -webkit-linear-gradient(45deg, #ff003c, #c648c8);\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    transition: all 265ms ease-in;\n    cursor: pointer;\n  }\n\n  .grid-container {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 20px;\n    font-size: 1.2em;\n  }\n}\n"},"NextButton/index.tsx":{path:"./NextButton",content:"import React, { FC, memo } from 'react';\nimport { Button } from 'antd';\nimport { NextButtonProps } from './type';\nimport classnames from 'classnames';\n\nexport const NextButton: FC<NextButtonProps> = ({\n  nextTheme,\n  btnDisplay = 'flex',\n  btnJustify = 'center',\n  btnContainerCls,\n  children,\n  disabled,\n  btnContainerProps,\n  mt = 0,\n  mb = 0,\n  ml = 0,\n  mr = 0,\n  my = 0,\n  mx = 0,\n  ...rest\n}) => {\n  const mSpacing =\n    (my && `${my}px 0 ${my}px 0`) ||\n    (my && `0 ${mx}px 0 ${mx}px`) ||\n    `${mt}px ${mr}px ${mb}px ${ml}px`;\n\n  return (\n    <div\n      {...{\n        className: classnames(!disabled && nextTheme, btnContainerCls),\n        ...btnContainerProps,\n        style: {\n          display: btnDisplay,\n          justifyContent: btnJustify,\n          margin: mSpacing,\n          ...btnContainerProps?.style,\n        },\n      }}\n    >\n      <Button\n        {...{\n          disabled: Boolean(rest.loading),\n          ...rest,\n        }}\n      >\n        {children}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(NextButton);\n"},"mapItem.tsx":{path:"./mapItem",content:"import React, { FC, Fragment } from 'react';\nimport { Col, ConfigProvider, Divider, Popover, Typography } from 'antd';\nimport CodeSandboxOutlined from '@ant-design/icons/CodeSandboxOutlined';\nimport { NextRow } from './NextRow';\nimport validateMessages from '@next-dev/core/es/validation';\n\nexport interface IUseMapItem {\n  data: any[];\n  children?: React.ReactNode;\n  antSpan?: number;\n  isAntCol?: boolean;\n  gut1?: number;\n  gut2?: number;\n  isDivider?: boolean;\n  cssProps?: React.CSSProperties;\n  cls?: string;\n}\n\nconst { Paragraph } = Typography;\n\nexport const MapItem: FC<IUseMapItem> = ({\n  gut1,\n  gut2,\n  isAntCol = true,\n  data = [],\n  antSpan = 6,\n  isDivider,\n  cssProps,\n  cls,\n}) => {\n  return (\n    <>\n      <ConfigProvider {...{ form: { validateMessages } }}>\n        <NextRow {...{ gut1, gut2, cls }}>\n          {data.map((item, key: number) => (\n            <Fragment key={key}>\n              {isAntCol && (\n                <>\n                  <Col span={antSpan}>\n                    {item.item}\n                    <span\n                      style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        marginTop: 10,\n                        ...cssProps,\n                      }}\n                    >\n                      <Paragraph\n                        style={{ justifyContent: 'center', marginBottom: 6, fontSize: 18 }}\n                        copyable={{ text: item?.copyCode }}\n                      />\n                      <Popover\n                        content={\n                          <>\n                            <Paragraph code copyable style={{ color: '#c41d7f' }}>\n                              {item?.copyCode}\n                            </Paragraph>\n                          </>\n                        }\n                      >\n                        <CodeSandboxOutlined\n                          style={{ marginLeft: 4, position: 'relative', bottom: -4, fontSize: 18 }}\n                        />\n                      </Popover>\n                    </span>\n                  </Col>\n                </>\n              )}\n              {isDivider && <Divider />}\n            </Fragment>\n          ))}\n        </NextRow>\n      </ConfigProvider>\n    </>\n  );\n};\n\nexport default MapItem;\n"},"NextRow/index.tsx":{path:"./NextRow",content:"import React, { FC, memo } from 'react';\nimport { Row } from 'antd';\nimport { LayoutProps } from './Layout.types';\nimport css from './styles.less';\nimport '../style/index.less';\nimport classnames from 'classnames';\n\nexport const NextRow: FC<LayoutProps> = ({ bgColor, children, gut1 = 10, gut2 = 10, cls }) => {\n  return (\n    <Row className={(classnames(css.layout, bgColor), cls)} gutter={[gut1, gut2]}>\n      {children}\n    </Row>\n  );\n};\n\nexport default memo(NextRow);\n"},"styles.less":{path:"./styles.less",content:".layout {\n  padding: 0px 0 10px;\n  .layout-content {\n    align-items: center;\n    display: flex;\n    justify-content: center;\n  }\n}\n"},"style/index.less":{path:"../style/index.less",content:"//* -------------- variable  --------------\r\n@import './variable.less';\r\n\r\n//* -------------- mixins  --------------\r\n@import './mixins/index.less';\r\n\r\n//* -------------- core  --------------\r\n@import './core/index.less';\r\n"},"NextFooter/index.tsx":{path:"./NextFooter",content:"import Footer from 'rc-footer/es';\nimport React, { FC } from 'react';\nimport { NextFooterProps } from './type';\nimport classnames from 'classnames';\nimport 'rc-footer/assets/index.less';\n\nexport const NextFooter: FC<NextFooterProps> = ({ nextTheme, className, ...rest }) => {\n  return <Footer {...{ className: classnames(nextTheme, className), ...rest }} />;\n};\n\nexport default NextFooter;\n"},"utils/IntlMessages.tsx":{path:"./utils/IntlMessages",content:"import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nexport const InjectMassage = (props) => <FormattedMessage {...props} />;\nexport default injectIntl(InjectMassage);\n"},"Auth/ForgotPassword/index.tsx":{path:"./Auth/ForgotPassword",content:"import { LockOutlined } from '@ant-design/icons';\nimport { Button, Col, Form, Input } from 'antd';\nimport { FormItemProps, FormProps } from 'antd/lib/form';\nimport { InputProps } from 'antd/lib/input';\nimport React, { memo, ReactNode } from 'react';\nimport { enUS, useIntl } from '@next-dev/provider/es';\nimport { NextButtonProps } from '../../NextButton/type';\nimport { ColProps } from 'antd/lib/col';\nimport { LAYOUT_COL_AUTH } from '@next-dev/core/es/constants';\nimport classnames from 'classnames';\nimport { NextButton } from '../../NextButton';\n\nconst FormItem = Form.Item;\n\n//* ----------------  props type --------------- */\ninterface IProp extends FormProps {\n  next?: {\n    logoWith?: number | string;\n    emailItemProps?: FormItemProps;\n    logo?: any;\n    alt?: string;\n    title?: string;\n    submitBtnProps?: NextButtonProps;\n    isHideSubmitBtn?: boolean;\n    customFooter?: ReactNode;\n    emailInputProps?: InputProps;\n    logoAlign?: string;\n    customField?: ReactNode;\n    isHideEmail?: boolean;\n    isHasPasswordField?: boolean;\n    goBackProps?: NextButtonProps;\n    isHasGoBackBtn?: boolean;\n    colProps?: ColProps;\n  };\n}\n\n//* ---------------- default props --------------- */\nexport const defaultProps = {\n  next: {\n    logoWith: 40,\n    alt: 'logo',\n    title: 'logo',\n    logo: 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg',\n  },\n};\n\n//* ----------------  main component --------------- */\nconst ForgotPassword = ({ next, ...rest }: IProp) => {\n  const {\n    next: { logo, alt, logoWith, title },\n  } = defaultProps;\n\n  const { getMessage } = useIntl();\n\n  return (\n    <Col className=\"box_shadow\" {...LAYOUT_COL_AUTH} {...next?.colProps}>\n      <img\n        src={next?.logo || logo}\n        alt={next?.alt || alt}\n        width={next?.logoWith || logoWith}\n        title={next?.title || title}\n        className={classnames(next?.logoAlign, 'mb-1')}\n      />\n      <div className=\"mb-1\">\n        <h2>{getMessage('auth.Forgot_Your_Password', enUS.auth.Forgot_Your_Password)}</h2>\n        <p>{getMessage('auth.userAuth_forgot', enUS.auth.userAuth_forgot)}</p>\n      </div>\n\n      <Form layout=\"vertical\" {...rest}>\n        {/* //* ----------------  FormItem --------------- */}\n        {!next?.isHideEmail && (\n          <FormItem\n            name=\"email\"\n            rules={[\n              {\n                type: 'email',\n                required: true,\n              },\n            ]}\n            {...next?.emailItemProps}\n          >\n            {/* //* ----------------  email field --------------- */}\n            <Input\n              type=\"email\"\n              placeholder=\"Email Address\"\n              size=\"large\"\n              {...next?.emailInputProps}\n            />\n          </FormItem>\n        )}\n        {/* //* ---------------- customField --------------- */}\n        {next?.customField && (\n          <>\n            <FormItem\n              name=\"email\"\n              rules={[\n                {\n                  type: 'email',\n                  required: true,\n                },\n              ]}\n              {...next?.emailItemProps}\n            >\n              {/* //* ----------------  email field --------------- */}\n              <Input\n                type=\"email\"\n                placeholder=\"Email Address\"\n                size=\"large\"\n                {...next?.emailInputProps}\n              />\n            </FormItem>\n          </>\n        )}\n\n        {/* //* ---------------- isHasPasswordField --------------- */}\n        {next?.isHasPasswordField && (\n          <>\n            <FormItem\n              name=\"password\"\n              rules={[{ required: true, message: 'Please input your Password!' }]}\n            >\n              <Input prefix={<LockOutlined />} type=\"password\" placeholder=\"Password\" />\n            </FormItem>\n            <FormItem\n              name=\"confirm-password\"\n              rules={[{ required: true, message: 'Please input your Password!' }]}\n            >\n              <Input prefix={<LockOutlined />} type=\"password\" placeholder=\"Confirm Password\" />\n            </FormItem>\n          </>\n        )}\n        {/* //* ---------------- customField --------------- */}\n        {next?.customField && next?.customField}\n\n        {/* //* ---------------- isHideSubmitBtn --------------- */}\n        <FormItem>\n          {next?.isHasGoBackBtn && (\n            <Button type=\"link\" {...next?.goBackProps}>\n              Go Back\n            </Button>\n          )}\n          {!next?.isHideSubmitBtn && (\n            <NextButton type=\"primary\" htmlType=\"submit\" {...next?.submitBtnProps}>\n              {getMessage('auth.userAuth_send', enUS.auth.userAuth_send)}\n            </NextButton>\n          )}\n        </FormItem>\n\n        {/* //* ---------------- customFooter --------------- */}\n        {next?.customFooter && next?.customFooter}\n      </Form>\n    </Col>\n  );\n};\nexport default memo(ForgotPassword);\n"},"Auth/SignIn/index.tsx":{path:"./Auth/SignIn",content:"import React, { memo, ReactNode } from 'react';\nimport { Checkbox, Col, Form, Input } from 'antd';\n\nimport { FormProps, FormItemProps } from 'antd/lib/form';\nimport { NextButtonProps } from '../../NextButton/type';\nimport { InputProps } from 'antd/lib/input';\nimport { LockOutlined, UserOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport { NextButton } from '../../NextButton';\nimport classNames from 'classnames';\nimport { ColProps } from 'antd/lib/col';\nimport { LAYOUT_COL_AUTH } from '@next-dev/core/es/constants';\n\nconst FormItem = Form.Item;\n\n//* ----------------  props type --------------- */\ninterface IProp extends FormProps {\n  next?: {\n    logoWith?: number | string;\n    emailItemProps?: FormItemProps;\n    passwordItemProps?: FormItemProps;\n    logo?: any;\n    alt?: string;\n    title?: string;\n    submitBtnProps?: NextButtonProps;\n    isHideSubmitBtn?: boolean;\n    customFooter?: ReactNode;\n    emailInputProps?: InputProps;\n    titleAlign?: any;\n    forgotPassPath?: string;\n    registerPath?: string;\n    colProps?: ColProps;\n    isWithoutEmail?: boolean;\n    isHasRemember?: boolean;\n  };\n}\n\nconst NextSignIn = memo(({ next, ...rest }: IProp) => {\n  //* ---------------- default props --------------- */\n  const defaultProps = {\n    next: {\n      logoWith: 40,\n      alt: 'logo',\n      title: 'Sign In',\n      logo: 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg',\n      forgotPassPath: next?.forgotPassPath,\n      registerPath: '',\n      titleAlign: 'text-center',\n    },\n  };\n\n  const {\n    next: { title, forgotPassPath, registerPath, logo, titleAlign },\n  } = defaultProps;\n  return (\n    <Col className=\"box_shadow\" {...LAYOUT_COL_AUTH} {...next?.colProps}>\n      <div className={classNames(next?.titleAlign || titleAlign)}>\n        <img src={next?.logo || logo} alt=\"logo\" title=\"logo\" width={50} />\n        <h1>{next?.title || title}</h1>\n      </div>\n      <Form {...rest}>\n        <FormItem\n          name=\"email\"\n          rules={[\n            {\n              type: next?.isWithoutEmail ? 'string' : 'email',\n              required: true,\n            },\n          ]}\n          {...next?.emailItemProps}\n        >\n          <Input\n            prefix={<UserOutlined />}\n            placeholder={next?.isWithoutEmail ? 'User Name' : 'Email'}\n          />\n        </FormItem>\n        <FormItem\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n          {...next?.passwordItemProps}\n        >\n          <Input prefix={<LockOutlined />} type=\"password\" placeholder=\"Password\" />\n        </FormItem>\n        {(next?.isHasRemember || forgotPassPath) && (\n          <FormItem>\n            {next?.isHasRemember && <Checkbox>Remember me</Checkbox>}\n            {forgotPassPath && <Link to={forgotPassPath}>Forgot Password</Link>}\n          </FormItem>\n        )}\n\n        {registerPath && (\n          <FormItem>\n            <Link to={next?.registerPath || registerPath}>Register Here</Link>\n          </FormItem>\n        )}\n\n        {/* //* ---------------- isHideSubmitBtn --------------- */}\n        {!next?.isHideSubmitBtn && (\n          <FormItem>\n            <NextButton type=\"primary\" block htmlType=\"submit\" {...next?.submitBtnProps}>\n              Log In\n            </NextButton>\n          </FormItem>\n        )}\n\n        {/* //* ---------------- customFooter --------------- */}\n        {next?.customFooter && next?.customFooter}\n      </Form>\n    </Col>\n  );\n});\n\nexport default NextSignIn;\n"},"Auth/ResetPassword/index.tsx":{path:"./Auth/ResetPassword",content:'import React from \'react\';\nimport { Button, Col, Form, Input } from \'antd\';\nimport { useIntl } from \'@next-dev/provider/es\';\nimport { FormProps } from \'antd/lib/form\';\nimport { ColProps } from \'antd/lib/col\';\nimport { LAYOUT_COL_AUTH } from \'@next-dev/core/es/constants\';\n\nconst FormItem = Form.Item;\n\ninterface IProp extends FormProps {\n  next?: {\n    logo?: string;\n    logoWidth?: string;\n    colProps?: ColProps;\n  };\n}\n\n//* ---------------- default props --------------- */\nexport const defaultProps = {\n  next: {\n    logo: \'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\',\n    logoWidth: 40,\n  },\n};\nconst ResetPassword = ({ next, ...rest }: IProp) => {\n  const { getMessage } = useIntl();\n  const {\n    next: { logo, logoWidth },\n  } = defaultProps;\n\n  return (\n    <Col className="box_shadow" {...LAYOUT_COL_AUTH} {...next?.colProps}>\n      <div className="gx-login-content">\n        <div className="gx-login-header">\n          <img\n            src={next?.logo || logo}\n            width={next?.logoWidth || logoWidth}\n            alt="wieldy"\n            title="wieldy"\n          />\n        </div>\n        <div className="gx-mb-4">\n          <h2>Reset Password</h2>\n          <p> {getMessage(\'appModule_enterPasswordReset\', \'\')}</p>\n        </div>\n\n        <Form className="gx-login-form gx-form-row0" {...rest}>\n          <FormItem\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n            name="password"\n          >\n            <Input type="password" placeholder="New Password" />\n          </FormItem>\n\n          <FormItem\n            name="confirm"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input placeholder="Retype New Password" type="password" />\n          </FormItem>\n\n          <FormItem>\n            <Button type="primary" htmlType="submit">\n              {getMessage(\'app_userAuth_reset\', \'\')}\n            </Button>\n          </FormItem>\n        </Form>\n      </div>\n    </Col>\n  );\n};\n\nexport default ResetPassword;\n'},"Auth/SignUp/index.tsx":{path:"./Auth/SignUp",content:'import React from \'react\';\nimport { Checkbox, Col, Form, Input } from \'antd\';\nimport { Link } from \'react-router-dom\';\nimport Icon, { GoogleOutlined, LockOutlined, MailOutlined, UserOutlined } from \'@ant-design/icons\';\nimport { FormProps } from \'antd/lib/form\';\nimport { LAYOUT_COL_AUTH } from \'@next-dev/core/es/constants\';\nimport { ColProps } from \'antd/lib/col\';\nimport { NextButton } from \'../../NextButton\';\nimport { NextButtonProps } from \'../../NextButton/type\';\nimport classNames from \'classnames\';\n\nconst FormItem = Form.Item;\n//* ----------------  props type --------------- */\ninterface IProp extends FormProps {\n  next?: {\n    logo?: any;\n    alt?: string;\n    title?: string;\n    titleAlign?: any;\n    isHasSocial?: boolean;\n    colProps?: ColProps;\n    signUpBtnProps?: NextButtonProps;\n  };\n}\n\n//* ---------------- default props --------------- */\nexport const defaultProps = {\n  next: {\n    logoWith: 40,\n    alt: \'logo\',\n    title: \'Sign Up\',\n    logo: \'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\',\n    titleAlign: \'text-center\',\n  },\n};\nconst {\n  next: { title, logo, titleAlign },\n} = defaultProps;\n\nconst NextSignUp = ({ next, ...rest }: IProp) => {\n  const [form] = Form.useForm();\n  return (\n    <Col className="box_shadow" {...LAYOUT_COL_AUTH} {...next?.colProps}>\n      <div className={classNames(next?.titleAlign || titleAlign)}>\n        <img src={next?.logo || logo} alt="logo" title="logo" width={50} />\n        <h1>{next?.title || title}</h1>\n      </div>\n      <Form scrollToFirstError name="register" form={form} {...rest}>\n        <FormItem name="user" rules={[{ required: true }]}>\n          <Input prefix={<UserOutlined />} placeholder="Username" />\n        </FormItem>\n\n        <FormItem name="email" rules={[{ required: true }]}>\n          <Input prefix={<MailOutlined />} placeholder="Email address" />\n        </FormItem>\n\n        <FormItem name="password" rules={[{ required: true }]}>\n          <Input prefix={<LockOutlined />} type="password" placeholder="Password" />\n        </FormItem>\n\n        <FormItem\n          dependencies={[\'password\']}\n          hasFeedback\n          name="confirm-password"\n          rules={[\n            {\n              required: true,\n            },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                if (!value || getFieldValue(\'password\') === value) {\n                  return Promise.resolve();\n                }\n                // eslint-disable-next-line prefer-promise-reject-errors\n                return Promise.reject(\'The two passwords that you entered do not match!\');\n              },\n            }),\n          ]}\n        >\n          <Input prefix={<LockOutlined />} type="password" placeholder="Confirm Password" />\n        </FormItem>\n\n        <FormItem name="remember" initialValue valuePropName="checked">\n          <Checkbox>Remember me</Checkbox>\n\n          <Link className="gx-login-form-forgot" to="/forgot-password">\n            Forgot password\n          </Link>\n        </FormItem>\n\n        <FormItem>\n          <Link to="/login">Login Here</Link>\n        </FormItem>\n\n        <FormItem>\n          <NextButton type="primary" htmlType="submit" {...next?.signUpBtnProps}>\n            Sign Up\n          </NextButton>\n        </FormItem>\n      </Form>\n\n      {next?.isHasSocial && (\n        <div className="gx-flex-row">\n          <span className="gx-mb-2 gx-mr-3">or Sign up using: </span>\n          <ul className="gx-social-link">\n            <li>\n              <GoogleOutlined />\n            </li>\n            <li>\n              <Icon type="facebook" />\n            </li>\n            <li>\n              <Icon type="github" />\n            </li>\n            <li>\n              <Icon type="twitter" />\n            </li>\n          </ul>\n        </div>\n      )}\n    </Col>\n  );\n};\n\nexport default NextSignUp;\n'},"Auth/LockScreen/index.tsx":{path:"./Auth/LockScreen",content:'import React from \'react\';\nimport { Avatar, Button, Form, Input } from \'antd\';\nimport { useIntl, enUS } from \'@next-dev/provider/es\';\nimport { FormProps } from \'antd/lib/form\';\nimport { Col, ColProps } from \'antd/lib/grid\';\n\nconst FormItem = Form.Item;\n\ntype IProp = {\n  next: {\n    colProps?: ColProps;\n  };\n} & FormProps;\n\n//* ---------------- default props --------------- */\nexport const defaultProps = {\n  next: {\n    logoWith: 40,\n    alt: \'logo\',\n    title: \'logo\',\n    logo: \'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\',\n  },\n};\n\nconst NextLockScreen = ({ next, ...rest }: IProp) => {\n  const { getMessage } = useIntl();\n\n  return (\n    <Col className="box_shadow" {...next?.colProps}>\n      <div className="gx-login-content gx-text-center">\n        <div className="gx-login-header">\n          <Avatar\n            shape="circle"\n            className="gx-size-120"\n            src="https://via.placeholder.com/150x150"\n          />\n        </div>\n        <div className="gx-mb-4">\n          <h3>John Smith</h3>\n          <p>{getMessage(\'appModule_enterPasswordUnlock\', enUS.appModule_enterPasswordUnlock)}</p>\n        </div>\n\n        <Form className="gx-login-form gx-form-row0" {...rest}>\n          <FormItem\n            name="password"\n            rules={[{ required: true, message: \'Please input your Password!\' }]}\n          >\n            <Input type="password" placeholder="Password" />\n          </FormItem>\n\n          <FormItem>\n            <Button type="primary" htmlType="submit">\n              {getMessage(\'app_userAuth_unLock\', enUS.app_userAuth_unLock)}\n            </Button>\n          </FormItem>\n        </Form>\n      </div>\n    </Col>\n  );\n};\n\nexport default NextLockScreen;\n'}}}),a.a.createElement(p,null)),a.a.createElement("div",{className:"markdown"},a.a.createElement("h2",{id:"usage"},a.a.createElement("a",{"aria-hidden":"true",href:"#usage"},a.a.createElement("span",{className:"icon icon-link"})),"Usage"),a.a.createElement("ul",null,a.a.createElement("li",null,"small icon bundle size by just add icon you want into collection it will include only icons that you add here: ",a.a.createElement("a",{href:"http://www.iconfont.cn",target:"_blank",rel:"noopener noreferrer"},"http://www.iconfont.cn",a.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":!0,x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15",className:"__dumi-default-external-link-icon"},a.a.createElement("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),a.a.createElement("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}))))),a.a.createElement(i.a,{code:"import IconFont from'@next-dev/component/es/IconFont'; \n\n<IconFont type=\"icon-list-icon-github\" />\n",lang:"tsx"}),a.a.createElement("h2",{id:"api"},a.a.createElement("a",{"aria-hidden":"true",href:"#api"},a.a.createElement("span",{className:"icon icon-link"})),"API"),a.a.createElement("table",null,a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",{align:"left"},"Props"),a.a.createElement("th",{align:"left"},"Description"),a.a.createElement("th",{align:"left"},"Types"),a.a.createElement("th",{align:"left"},"Defaults"))),a.a.createElement("tbody",null,a.a.createElement("tr",null,a.a.createElement("td",{align:"left"},"type"),a.a.createElement("td",{align:"left"},"Icon type, it is recommended to name it",a.a.createElement("code",null,"icon-"),"beginning"),a.a.createElement("td",{align:"left"},"string"),a.a.createElement("td",{align:"left"},"-")))),a.a.createElement("h2",{id:"note"},a.a.createElement("a",{"aria-hidden":"true",href:"#note"},a.a.createElement("span",{className:"icon icon-link"})),"Note"),a.a.createElement("p",null,"The system provides a global registration method. You only need to register once at the entrance of the system. This method has been registered at the entrance of the system and does not require developers to process",a.a.createElement("code",null,"tsx")," import ","{"," initComponent ","}"," from '@wetrial/component';"),a.a.createElement("p",null,"initComponent(","{"," iconFontUrl:'' //icon Gallery URL ","}",")"),a.a.createElement(i.a,{code:"",lang:"unknown"})))}},fOUu:function(n,e,t){"use strict";t.r(e);var o=t("q1tI"),r=t.n(o),a=t("KiPk");e["default"]=()=>{var n=[{item:r.a.createElement(a["j"],{type:"style1",data:{avatar:"https://avatars.githubusercontent.com/u/51617383?s=400&u=59f471da8c7efa0fde0d34652dde3635a6ff9b9f&v=4",name:"Sila Rim",sub1:"32342 posts",sub2:"4235 likes",socialData:[{name:"facebook",iconType:"icon-facebook1"},{name:"github",iconType:"icon-list-icon-github"}]}}),copyCode:'<NextButton type="primary">Primary Button</NextButton>'}];return r.a.createElement(a["c"],{data:n,antSpan:10,gut1:50})}}}]);