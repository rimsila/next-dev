(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[73],{YQhm:function(e,n,a){"use strict";a.r(n);var t=a("q1tI"),r=a.n(t),l=(a("B2uJ"),a("+su7"),a("qOys")),c=a.n(l);a("5Yjd");n["default"]=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"markdown"},r.a.createElement("h1",{id:"es6-knowledge"},r.a.createElement("a",{"aria-hidden":"true",href:"#es6-knowledge"},r.a.createElement("span",{className:"icon icon-link"})),"ES6 knowledge"),r.a.createElement("h2",{id:"let-const-var"},r.a.createElement("a",{"aria-hidden":"true",href:"#let-const-var"},r.a.createElement("span",{className:"icon icon-link"})),"let, const, var"),r.a.createElement("p",null,"Use ",r.a.createElement("code",null,"const")," and ",r.a.createElement("code",null,"let")," instead of ",r.a.createElement("code",null,"var"),". ",r.a.createElement("code",null,"const")," means that the identifier can\u2019t be reassigned. ",r.a.createElement("code",null,"let")," is used for a reassign variable. Beware the difference that ",r.a.createElement("code",null,"var")," is scoped to a function, ",r.a.createElement("code",null,"const")," and ",r.a.createElement("code",null,"let")," are both scoped to the block\u3002"),r.a.createElement(c.a,{code:"const delay = 1000; //can't change delay\ndelay = 1001; //can't change DELAY\n\nlet count = 0;\ncount = count + 1; //change count become 1\n",lang:"javascript"}),r.a.createElement("h2",{id:"template-literals"},r.a.createElement("a",{"aria-hidden":"true",href:"#template-literals"},r.a.createElement("span",{className:"icon icon-link"})),"Template literals"),r.a.createElement("p",null,"Template literals (string interpolation and multi-line strings) provides convenient ways for coding strings. It easy to use dynamic variable inside a contend."),r.a.createElement(c.a,{code:"//Normal Javascript\nconst msg = 'world';\nconst user = 'hello' + msg;\n\n// literal\nconst user1 = `hello ${msg}`;\n//output: hello world\n\n// //Normal Javascript multi-line\nconst content = 'Hello'+{msg}+\",\"+ \\n Thanks for ordering\"+${msg}\n\n// multi-line string\nconst content1 = `\n  Hello ${msg},\n  Thanks for ordering ${qty}.\n`;\n",lang:"javascript"}),r.a.createElement("h4",{id:"default-function-parameters"},r.a.createElement("a",{"aria-hidden":"true",href:"#default-function-parameters"},r.a.createElement("span",{className:"icon icon-link"})),"Default function parameters"),r.a.createElement(c.a,{code:"function logActivity(activity = 'skiing') {\n  console.log(activity);\n}\n\nlogActivity(); // skiing\n",lang:"javascript"}),r.a.createElement("h3",{id:"arrow-function"},r.a.createElement("a",{"aria-hidden":"true",href:"#arrow-function"},r.a.createElement("span",{className:"icon icon-link"})),"Arrow Function"),r.a.createElement("p",null,"Concise syntax for writing function expressions, without writing ",r.a.createElement("code",null,"function")," and ",r.a.createElement("code",null,"return")," keywords. Arrow functions are anonymous and change the way ",r.a.createElement("code",null,"this")," binds in functions."),r.a.createElement("p",null,"An arrow function does not have its own ",r.a.createElement("code",null,"this"),"; the ",r.a.createElement("code",null,"this")," value of the enclosing execution context is used."),r.a.createElement("p",null,"For example:"),r.a.createElement(c.a,{code:"[1, 2, 3].map((x) => x + 1); // [2, 3, 4]\n",lang:"javascript"}),r.a.createElement("p",null,"Equivalent to:"),r.a.createElement(c.a,{code:"[1, 2, 3].map(\n  function (x) {\n    return x + 1;\n  }.bind(this),\n);\n",lang:"javascript"}),r.a.createElement("h3",{id:"module-import-and-export"},r.a.createElement("a",{"aria-hidden":"true",href:"#module-import-and-export"},r.a.createElement("span",{className:"icon icon-link"})),"Module ",r.a.createElement("code",null,"import")," and ",r.a.createElement("code",null,"export")),r.a.createElement("p",null,"Use ",r.a.createElement("code",null,"import")," for module import and ",r.a.createElement("code",null,"export")," for module export."),r.a.createElement("p",null,"For example:"),r.a.createElement(c.a,{code:"// import whole\nimport dva from 'dva';\n\n// partial importation\nimport { connect } from 'dva';\nimport { Link, Route } from 'dva/router';\n\n// import whole and assign to github\nimport * as github from './services/github';\n\n// default export\nexport default App;\n// partial exportation and using import { App } from './file'\nexport class App extend Component {};\n",lang:"javascript"}),r.a.createElement("h3",{id:"es6-object-and-array"},r.a.createElement("a",{"aria-hidden":"true",href:"#es6-object-and-array"},r.a.createElement("span",{className:"icon icon-link"})),"ES6 Object and Array"),r.a.createElement("h4",{id:"destructing"},r.a.createElement("a",{"aria-hidden":"true",href:"#destructing"},r.a.createElement("span",{className:"icon icon-link"})),"Destructing"),r.a.createElement("p",null,"Using ",r.a.createElement("code",null,"destructing")," to extract data from Object or Array, and assign to variable concisely."),r.a.createElement(c.a,{code:"// Object\nconst user = { name: 'guanguan', age: 2 };\nconst { name, age } = user;\nconsole.log(`${name} : ${age}`); // guanguan : 2\n\n// Array\nconst arr = [1, 2];\nconst [foo, bar] = arr;\nconsole.log(foo); // 1\n",lang:"javascript"}),r.a.createElement("p",null,r.a.createElement("code",null,"destructing")," can also be applied to variables in function parameter"),r.a.createElement(c.a,{code:"const add = (state, { payload }) => {\n  return state.concat(payload);\n};\n",lang:"javascript"}),r.a.createElement("p",null,r.a.createElement("code",null,"destructing")," allows alias assignment for meaningful naming"),r.a.createElement(c.a,{code:"const add = (state, { payload: todo }) => {\n  return state.concat(todo);\n};\n",lang:"javascript"}),r.a.createElement("h4",{id:"object-literals-improvement"},r.a.createElement("a",{"aria-hidden":"true",href:"#object-literals-improvement"},r.a.createElement("span",{className:"icon icon-link"})),"Object literals improvement"),r.a.createElement("p",null,"The opposite operation to ",r.a.createElement("code",null,"destructing"),", used to construct a new Object"),r.a.createElement(c.a,{code:"const name = 'duoduo';\nconst age = 8;\n\nconst user = { name, age }; // { name: 'duoduo', age: 8 }\n",lang:"javascript"}),r.a.createElement("p",null,"The ",r.a.createElement("code",null,"function")," keyword can be omitted when defining Object methods"),r.a.createElement(c.a,{code:"app.model({\n  reducers: {\n    add() {}, // equivalent to add: function() {}\n  },\n  effects: {\n    *addRemote() {}, // equivalent to addRemote: function*() {}\n  },\n});\n",lang:"javascript"}),r.a.createElement("h4",{id:"spread-operator"},r.a.createElement("a",{"aria-hidden":"true",href:"#spread-operator"},r.a.createElement("span",{className:"icon icon-link"})),"Spread Operator"),r.a.createElement("p",null,"Spread Operator or ",r.a.createElement("code",null,"...")," operator, can be used in several scenarios:"),r.a.createElement("p",null,"Constructing new Array with extra data, equivalent to ",r.a.createElement("code",null,"push")),r.a.createElement(c.a,{code:"const todos = ['Learn dva'];\n[...todos, 'Learn antd']; // ['Learn dva', 'Learn antd']\n",lang:"javascript"}),r.a.createElement("p",null,"Or extracting data from array literal, thinking of ",r.a.createElement("code",null,"slice")),r.a.createElement(c.a,{code:"const arr = ['a', 'b', 'c'];\nconst [first, ...rest] = arr;\nrest; // ['b', 'c']\n\n// With ignore\nconst [first, , ...rest] = arr;\nrest; // ['c']\n",lang:"javascript"}),r.a.createElement("p",null,"Constructing Array from function arguments"),r.a.createElement(c.a,{code:"function directions(first, ...rest) {\n  console.log(rest);\n}\ndirections('a', 'b', 'c'); // ['b', 'c'];\n",lang:"javascript"}),r.a.createElement("p",null,"Replacing ",r.a.createElement("code",null,"apply")),r.a.createElement(c.a,{code:"function foo(x, y, z) {}\nconst args = [1, 2, 3];\n\n//Two equivalent expression:\nfoo.apply(null, args);\nfoo(...args);\n",lang:"javascript"}),r.a.createElement("p",null,"Constructing (updating) new Object. (ES2017 stage-2 proposal)"),r.a.createElement(c.a,{code:"const foo = {\n  a: 1,\n  b: 2,\n};\nconst bar = {\n  b: 3,\n  c: 2,\n};\nconst d = 4;\n\nconst ret = { ...foo, ...bar, d }; // { a:1, b:3, c:2, d:4 }\n",lang:"javascript"}),r.a.createElement("p",null,"Also in JSX, Spread Operator can be used for adding new props, please refer to ",r.a.createElement("a",{href:"#spread-attributes"},"Spread Attributes"),"."),r.a.createElement("h3",{id:"promises"},r.a.createElement("a",{"aria-hidden":"true",href:"#promises"},r.a.createElement("span",{className:"icon icon-link"})),"Promises"),r.a.createElement("p",null,"Better async request handling with ",r.a.createElement("code",null,"Promise"),", for example fetch async request:"),r.a.createElement(c.a,{code:"fetch('/api/todos')\n  .then((res) => res.json())\n  .then((data) => ({ data }))\n  .catch((err) => ({ err }));\n",lang:"javascript"}),r.a.createElement("p",null,"Define ",r.a.createElement("code",null,"Promise")),r.a.createElement(c.a,{code:"const delay = (timeout) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout);\n  });\n};\n\ndelay(1000).then((_) => {\n  console.log('executed');\n});\n",lang:"javascript"})))}}}]);